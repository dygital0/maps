{"ast":null,"code":"var _jsxFileName = \"F:\\\\gps-web-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css'; // Make sure to import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [start, setStart] = useState('51.505,-0.09');\n  const [end, setEnd] = useState('51.51,-0.1');\n  const [map, setMap] = useState(null);\n  const [costs, setCosts] = useState({\n    gameTheory: 0,\n    chaosTheory: 0\n  }); // Initialize costs with default values\n  const mapInitializedRef = useRef(false);\n  const mapContainerRef = useRef(null); // Reference for the map container\n\n  useEffect(() => {\n    // Initialize the map\n    const initMap = () => {\n      const mapInstance = L.map(mapContainerRef.current).setView([51.505, -0.09], 13);\n      L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=V6jo7iP3AoV0ql49vAAAQ6KDRDVcVAfD', {\n        attribution: '&copy; TomTom'\n      }).addTo(mapInstance);\n      setMap(mapInstance);\n      mapInitializedRef.current = true; // Mark the map as initialized\n    };\n    if (!mapInitializedRef.current) {\n      initMap();\n    }\n    return () => {\n      if (map) {\n        map.remove(); // Cleanup the map instance\n        setMap(null);\n      }\n    };\n  }, [map]);\n  const handleRouteFetch = async () => {\n    try {\n      const routeData = await getRoute(start, end);\n      // Log routeData to inspect its structure\n      console.log('Route Data:', routeData);\n      if (!routeData || !routeData.legs || routeData.legs.length === 0) {\n        alert('No route found. Please check your coordinates and try again.');\n        return;\n      }\n\n      // Clear existing layers if necessary\n      map.eachLayer(layer => {\n        if (layer instanceof L.Polyline) {\n          map.removeLayer(layer);\n        }\n      });\n\n      // Add the new route to the map\n      const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n      const polyline = L.polyline(latLngs, {\n        color: 'blue'\n      }).addTo(map);\n      map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n\n      // Extract the distance from the route data\n      const distance = routeData.legs[0].length; // Check this property based on your API response\n      console.log('Extracted Distance:', distance); // Log the distance value\n\n      // Ensure distance is valid\n      if (typeof distance !== 'number' || isNaN(distance) || distance <= 0) {\n        console.warn('Invalid distance:', distance);\n        alert('Invalid distance received from route data.');\n        return; // Exit if distance is not valid\n      }\n\n      // Simulate cost calculation using game theory and chaos theory\n      simulateCosts(distance);\n    } catch (error) {\n      console.error('Failed to fetch route:', error);\n      alert('Failed to fetch route. Please check your coordinates and try again.');\n    }\n  };\n  const simulateCosts = distance => {\n    // Simulate some costs based on distance and hypothetical parameters\n    const trafficFactor = Math.random(); // Simulate traffic factor (0 to 1)\n    const chaosFactor = Math.random() * 2; // Simulate chaos factor (1 to 2)\n\n    const gameTheoryCost = distance * (1 + trafficFactor);\n    const chaosTheoryCost = distance * (1 + chaosFactor);\n    console.log('Game Theory Cost:', gameTheoryCost); // Log calculated cost\n    console.log('Chaos Theory Cost:', chaosTheoryCost); // Log calculated cost\n\n    setCosts({\n      gameTheory: gameTheoryCost.toFixed(2),\n      // Format costs to two decimal places\n      chaosTheory: chaosTheoryCost.toFixed(2)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GPS Routing with TomTom API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: start,\n        onChange: e => setStart(e.target.value),\n        placeholder: \"Start (lat,long)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: end,\n        onChange: e => setEnd(e.target.value),\n        placeholder: \"End (lat,long)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRouteFetch,\n        children: \"Get Route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      id: \"map\",\n      className: \"map-container\",\n      style: {\n        width: '100%',\n        height: '600px',\n        position: 'relative'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), costs && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"costs-container\",\n      style: {\n        marginTop: '20px',\n        padding: '10px',\n        border: '1px solid #ccc',\n        borderRadius: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cost Estimates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Game Theory Cost:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 24\n        }, this), \" $\", costs.gameTheory]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Chaos Theory Cost:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 24\n        }, this), \" $\", costs.chaosTheory]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"eqHS1pX2Hgydz1dQC3Bj6H+tm9k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","getRoute","L","jsxDEV","_jsxDEV","App","_s","start","setStart","end","setEnd","map","setMap","costs","setCosts","gameTheory","chaosTheory","mapInitializedRef","mapContainerRef","initMap","mapInstance","current","setView","tileLayer","attribution","addTo","remove","handleRouteFetch","routeData","console","log","legs","length","alert","eachLayer","layer","Polyline","removeLayer","latLngs","points","point","latitude","longitude","polyline","color","fitBounds","getBounds","distance","isNaN","warn","simulateCosts","error","trafficFactor","Math","random","chaosFactor","gameTheoryCost","chaosTheoryCost","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","ref","id","style","width","height","position","marginTop","padding","border","borderRadius","_c","$RefreshReg$"],"sources":["F:/gps-web-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css'; // Make sure to import your CSS file\n\nfunction App() {\n    const [start, setStart] = useState('51.505,-0.09');\n    const [end, setEnd] = useState('51.51,-0.1');\n    const [map, setMap] = useState(null);\n    const [costs, setCosts] = useState({ gameTheory: 0, chaosTheory: 0 }); // Initialize costs with default values\n    const mapInitializedRef = useRef(false);\n    const mapContainerRef = useRef(null); // Reference for the map container\n\n    useEffect(() => {\n        // Initialize the map\n        const initMap = () => {\n            const mapInstance = L.map(mapContainerRef.current).setView([51.505, -0.09], 13);\n            L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=V6jo7iP3AoV0ql49vAAAQ6KDRDVcVAfD', {\n                attribution: '&copy; TomTom'\n            }).addTo(mapInstance);\n            setMap(mapInstance);\n            mapInitializedRef.current = true; // Mark the map as initialized\n        };\n\n        if (!mapInitializedRef.current) {\n            initMap();\n        }\n\n        return () => {\n            if (map) {\n                map.remove(); // Cleanup the map instance\n                setMap(null);\n            }\n        };\n    }, [map]);\n\n    const handleRouteFetch = async () => {\n        try {\n            const routeData = await getRoute(start, end);\n            // Log routeData to inspect its structure\n            console.log('Route Data:', routeData);\n            if (!routeData || !routeData.legs || routeData.legs.length === 0) {\n                alert('No route found. Please check your coordinates and try again.');\n                return;\n            }\n\n            // Clear existing layers if necessary\n            map.eachLayer((layer) => {\n                if (layer instanceof L.Polyline) {\n                    map.removeLayer(layer);\n                }\n            });\n\n            // Add the new route to the map\n            const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n            const polyline = L.polyline(latLngs, { color: 'blue' }).addTo(map);\n            map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n\n            // Extract the distance from the route data\n            const distance = routeData.legs[0].length; // Check this property based on your API response\n            console.log('Extracted Distance:', distance); // Log the distance value\n\n            // Ensure distance is valid\n            if (typeof distance !== 'number' || isNaN(distance) || distance <= 0) {\n                console.warn('Invalid distance:', distance);\n                alert('Invalid distance received from route data.');\n                return; // Exit if distance is not valid\n            }\n\n            // Simulate cost calculation using game theory and chaos theory\n            simulateCosts(distance);\n\n        } catch (error) {\n            console.error('Failed to fetch route:', error);\n            alert('Failed to fetch route. Please check your coordinates and try again.');\n        }\n    };\n\n    const simulateCosts = (distance) => {\n        // Simulate some costs based on distance and hypothetical parameters\n        const trafficFactor = Math.random(); // Simulate traffic factor (0 to 1)\n        const chaosFactor = Math.random() * 2; // Simulate chaos factor (1 to 2)\n\n        const gameTheoryCost = distance * (1 + trafficFactor);\n        const chaosTheoryCost = distance * (1 + chaosFactor);\n\n        console.log('Game Theory Cost:', gameTheoryCost); // Log calculated cost\n        console.log('Chaos Theory Cost:', chaosTheoryCost); // Log calculated cost\n\n        setCosts({\n            gameTheory: gameTheoryCost.toFixed(2), // Format costs to two decimal places\n            chaosTheory: chaosTheoryCost.toFixed(2),\n        });\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>GPS Routing with TomTom API</h1>\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={start}\n                    onChange={(e) => setStart(e.target.value)}\n                    placeholder=\"Start (lat,long)\"\n                />\n                <input\n                    type=\"text\"\n                    value={end}\n                    onChange={(e) => setEnd(e.target.value)}\n                    placeholder=\"End (lat,long)\"\n                />\n                <button onClick={handleRouteFetch}>Get Route</button>\n            </div>\n            <div ref={mapContainerRef} id=\"map\" className=\"map-container\" style={{ width: '100%', height: '600px', position: 'relative' }}></div>\n            {costs && (\n                <div className=\"costs-container\" style={{ marginTop: '20px', padding: '10px', border: '1px solid #ccc', borderRadius: '5px' }}>\n                    <h2>Cost Estimates</h2>\n                    <p><strong>Game Theory Cost:</strong> ${costs.gameTheory}</p>\n                    <p><strong>Chaos Theory Cost:</strong> ${costs.chaosTheory}</p>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
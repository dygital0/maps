{"ast":null,"code":"var _jsxFileName = \"F:\\\\gps-web-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\nimport './App.css'; // Make sure to import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [start, setStart] = useState('51.505,-0.09');\n  const [end, setEnd] = useState('51.51,-0.1');\n  const [map, setMap] = useState(null);\n  const mapInitializedRef = useRef(false);\n  const mapContainerRef = useRef(null); // Reference for the map container\n\n  useEffect(() => {\n    // Initialize the map\n    const initMap = () => {\n      const mapInstance = L.map(mapContainerRef.current).setView([51.505, -0.09], 13);\n      L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=S4DA9p3Bk7NmcRIjkdZ1Q4APGpgGdBXa', {\n        attribution: '&copy; TomTom'\n      }).addTo(mapInstance);\n      setMap(mapInstance);\n      mapInitializedRef.current = true; // Mark the map as initialized\n    };\n    if (!mapInitializedRef.current) {\n      initMap();\n    }\n    return () => {\n      if (map) {\n        map.remove(); // Cleanup the map instance\n        setMap(null);\n      }\n    };\n  }, [map]);\n  const handleRouteFetch = async () => {\n    const routeData = await getRoute(start, end);\n    if (map) {\n      // Clear existing layers if necessary\n      map.eachLayer(layer => {\n        if (layer instanceof L.Polyline) {\n          map.removeLayer(layer);\n        }\n      });\n\n      // Add the new route to the map\n      const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n      const polyline = L.polyline(latLngs, {\n        color: 'blue'\n      }).addTo(map);\n      map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GPS Routing with TomTom API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: start,\n        onChange: e => setStart(e.target.value),\n        placeholder: \"Start (lat,long)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: end,\n        onChange: e => setEnd(e.target.value),\n        placeholder: \"End (lat,long)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRouteFetch,\n        children: \"Get Route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      id: \"map\",\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"P+I7y09rQXay4e5fk0M7B/yH/FA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","getRoute","L","jsxDEV","_jsxDEV","App","_s","start","setStart","end","setEnd","map","setMap","mapInitializedRef","mapContainerRef","initMap","mapInstance","current","setView","tileLayer","attribution","addTo","remove","handleRouteFetch","routeData","eachLayer","layer","Polyline","removeLayer","latLngs","legs","points","point","latitude","longitude","polyline","color","fitBounds","getBounds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","ref","id","_c","$RefreshReg$"],"sources":["F:/gps-web-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\nimport './App.css'; // Make sure to import your CSS file\n\nfunction App() {\n    const [start, setStart] = useState('51.505,-0.09');\n    const [end, setEnd] = useState('51.51,-0.1');\n    const [map, setMap] = useState(null);\n    const mapInitializedRef = useRef(false);\n    const mapContainerRef = useRef(null); // Reference for the map container\n\n    useEffect(() => {\n        // Initialize the map\n        const initMap = () => {\n            const mapInstance = L.map(mapContainerRef.current).setView([51.505, -0.09], 13);\n            L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=S4DA9p3Bk7NmcRIjkdZ1Q4APGpgGdBXa', {\n                attribution: '&copy; TomTom'\n            }).addTo(mapInstance);\n            setMap(mapInstance);\n            mapInitializedRef.current = true; // Mark the map as initialized\n        };\n\n        if (!mapInitializedRef.current) {\n            initMap();\n        }\n\n        return () => {\n            if (map) {\n                map.remove(); // Cleanup the map instance\n                setMap(null);\n            }\n        };\n    }, [map]);\n\n    const handleRouteFetch = async () => {\n        const routeData = await getRoute(start, end);\n        if (map) {\n            // Clear existing layers if necessary\n            map.eachLayer((layer) => {\n                if (layer instanceof L.Polyline) {\n                    map.removeLayer(layer);\n                }\n            });\n\n            // Add the new route to the map\n            const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n            const polyline = L.polyline(latLngs, { color: 'blue' }).addTo(map);\n            map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>GPS Routing with TomTom API</h1>\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={start}\n                    onChange={(e) => setStart(e.target.value)}\n                    placeholder=\"Start (lat,long)\"\n                />\n                <input\n                    type=\"text\"\n                    value={end}\n                    onChange={(e) => setEnd(e.target.value)}\n                    placeholder=\"End (lat,long)\"\n                />\n                <button onClick={handleRouteFetch}>Get Route</button>\n            </div>\n            <div ref={mapContainerRef} id=\"map\" className=\"map-container\"></div>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\gps-web-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [start, setStart] = useState('51.505,-0.09');\n  const [end, setEnd] = useState('51.51,-0.1');\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Initialize the map\n    const initMap = () => {\n      const mapInstance = L.map('map').setView([51.505, -0.09], 13);\n      L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=S4DA9p3Bk7NmcRIjkdZ1Q4APGpgGdBXa', {\n        attribution: '&copy; TomTom'\n      }).addTo(mapInstance);\n      setMap(mapInstance);\n    };\n\n    // Check if the map has already been initialized\n    if (!map) {\n      initMap();\n    }\n\n    // Cleanup function to remove the map instance when the component unmounts\n    return () => {\n      if (map) {\n        map.remove();\n        setMap(null); // Reset the map state\n      }\n    };\n  }, [map]); // Add map as a dependency\n\n  const handleRouteFetch = async () => {\n    const routeData = await getRoute(start, end);\n    if (map) {\n      // Clear existing layers if necessary\n      map.eachLayer(layer => {\n        if (layer instanceof L.Polyline) {\n          map.removeLayer(layer);\n        }\n      });\n\n      // Add the new route to the map\n      const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n      const polyline = L.polyline(latLngs, {\n        color: 'blue'\n      }).addTo(map);\n      map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GPS Routing with TomTom API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: start,\n      onChange: e => setStart(e.target.value),\n      placeholder: \"Start (lat,long)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: end,\n      onChange: e => setEnd(e.target.value),\n      placeholder: \"End (lat,long)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRouteFetch,\n      children: \"Get Route\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100%',\n        height: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"jegU7LcHvAznxkAxlJrbkx7iDIc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","getRoute","L","jsxDEV","_jsxDEV","App","_s","start","setStart","end","setEnd","map","setMap","initMap","mapInstance","setView","tileLayer","attribution","addTo","remove","handleRouteFetch","routeData","eachLayer","layer","Polyline","removeLayer","latLngs","legs","points","point","latitude","longitude","polyline","color","fitBounds","getBounds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","id","style","width","height","_c","$RefreshReg$"],"sources":["F:/gps-web-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\n\nfunction App() {\n    const [start, setStart] = useState('51.505,-0.09');\n    const [end, setEnd] = useState('51.51,-0.1');\n    const [map, setMap] = useState(null);\n\n    useEffect(() => {\n        // Initialize the map\n        const initMap = () => {\n            const mapInstance = L.map('map').setView([51.505, -0.09], 13);\n            L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=S4DA9p3Bk7NmcRIjkdZ1Q4APGpgGdBXa', {\n                attribution: '&copy; TomTom'\n            }).addTo(mapInstance);\n            setMap(mapInstance);\n        };\n\n        // Check if the map has already been initialized\n        if (!map) {\n            initMap();\n        }\n\n        // Cleanup function to remove the map instance when the component unmounts\n        return () => {\n            if (map) {\n                map.remove();\n                setMap(null); // Reset the map state\n            }\n        };\n    }, [map]); // Add map as a dependency\n\n    const handleRouteFetch = async () => {\n        const routeData = await getRoute(start, end);\n        if (map) {\n            // Clear existing layers if necessary\n            map.eachLayer((layer) => {\n                if (layer instanceof L.Polyline) {\n                    map.removeLayer(layer);\n                }\n            });\n\n            // Add the new route to the map\n            const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n            const polyline = L.polyline(latLngs, { color: 'blue' }).addTo(map);\n            map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>GPS Routing with TomTom API</h1>\n            <input\n                type=\"text\"\n                value={start}\n                onChange={(e) => setStart(e.target.value)}\n                placeholder=\"Start (lat,long)\"\n            />\n            <input\n                type=\"text\"\n                value={end}\n                onChange={(e) => setEnd(e.target.value)}\n                placeholder=\"End (lat,long)\"\n            />\n            <button onClick={handleRouteFetch}>Get Route</button>\n            <div id=\"map\" style={{ width: '100%', height: '600px' }}></div>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
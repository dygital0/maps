{"ast":null,"code":"var _jsxFileName = \"F:\\\\gps-web-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [start, setStart] = useState('51.505,-0.09');\n  const [end, setEnd] = useState('51.51,-0.1');\n  const [map, setMap] = useState(null);\n  const mapInitializedRef = useRef(false);\n  const mapContainerRef = useRef(null);\n  useEffect(() => {\n    const initMap = () => {\n      const mapInstance = L.map(mapContainerRef.current).setView([51.505, -0.09], 13);\n      L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=V6jo7iP3AoV0ql49vAAAQ6KDRDVcVAfD', {\n        attribution: '&copy; TomTom'\n      }).addTo(mapInstance);\n      setMap(mapInstance);\n      mapInitializedRef.current = true;\n    };\n    if (!mapInitializedRef.current) {\n      initMap();\n    }\n    return () => {\n      if (map) {\n        map.remove();\n        setMap(null);\n      }\n    };\n  }, [map]);\n  const fetchTrafficData = async routeData => {\n    // Placeholder function to simulate fetching real-time traffic data\n    return [{\n      segment: 'A',\n      congestionLevel: 'low'\n    }, {\n      segment: 'B',\n      congestionLevel: 'high'\n    }, {\n      segment: 'C',\n      congestionLevel: 'medium'\n    }];\n  };\n  const predictTraffic = async routeData => {\n    const trafficData = await fetchTrafficData(routeData); // Use routeData\n    let predictedTime = calculateBaseTime(routeData); // Use routeData\n\n    trafficData.forEach(segment => {\n      if (segment.congestionLevel === 'high') {\n        predictedTime *= 1.5; // Increase time by 50%\n      } else if (segment.congestionLevel === 'medium') {\n        predictedTime *= 1.2; // Increase time by 20%\n      }\n    });\n    return predictedTime; // Return the predicted time for the route\n  };\n  const calculateBaseTime = routeData => {\n    // Calculate the base time for the route based on distance or other factors\n    return 20; // Assume 20 minutes base time for any route\n  };\n  const handleRouteFetch = async () => {\n    try {\n      const routeData = await getRoute(start, end);\n\n      // Predict traffic and adjust the route accordingly\n      const predictedTime = await predictTraffic(routeData); // Use routeData\n      console.log('Predicted time with traffic:', predictedTime);\n      if (map) {\n        // Clear existing layers if necessary\n        map.eachLayer(layer => {\n          if (layer instanceof L.Polyline) {\n            map.removeLayer(layer);\n          }\n        });\n\n        // Add the new route to the map\n        const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n        const polyline = L.polyline(latLngs, {\n          color: 'blue'\n        }).addTo(map);\n        map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n      }\n    } catch (error) {\n      console.error('Failed to fetch route:', error);\n      alert('Failed to fetch route. Please check your coordinates and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GPS Routing with TomTom API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: start,\n        onChange: e => setStart(e.target.value),\n        placeholder: \"Start (lat,long)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: end,\n        onChange: e => setEnd(e.target.value),\n        placeholder: \"End (lat,long)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRouteFetch,\n        children: \"Get Route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      id: \"map\",\n      className: \"map-container\",\n      style: {\n        width: '100%',\n        height: '600px',\n        position: 'relative'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"P+I7y09rQXay4e5fk0M7B/yH/FA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","getRoute","L","jsxDEV","_jsxDEV","App","_s","start","setStart","end","setEnd","map","setMap","mapInitializedRef","mapContainerRef","initMap","mapInstance","current","setView","tileLayer","attribution","addTo","remove","fetchTrafficData","routeData","segment","congestionLevel","predictTraffic","trafficData","predictedTime","calculateBaseTime","forEach","handleRouteFetch","console","log","eachLayer","layer","Polyline","removeLayer","latLngs","legs","points","point","latitude","longitude","polyline","color","fitBounds","getBounds","error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","ref","id","style","width","height","position","_c","$RefreshReg$"],"sources":["F:/gps-web-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\n\nfunction App() {\n    const [start, setStart] = useState('51.505,-0.09');\n    const [end, setEnd] = useState('51.51,-0.1');\n    const [map, setMap] = useState(null);\n    const mapInitializedRef = useRef(false);\n    const mapContainerRef = useRef(null);\n\n    useEffect(() => {\n        const initMap = () => {\n            const mapInstance = L.map(mapContainerRef.current).setView([51.505, -0.09], 13);\n            L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=V6jo7iP3AoV0ql49vAAAQ6KDRDVcVAfD', {\n                attribution: '&copy; TomTom'\n            }).addTo(mapInstance);\n            setMap(mapInstance);\n            mapInitializedRef.current = true;\n        };\n\n        if (!mapInitializedRef.current) {\n            initMap();\n        }\n\n        return () => {\n            if (map) {\n                map.remove();\n                setMap(null);\n            }\n        };\n    }, [map]);\n\n    const fetchTrafficData = async (routeData) => {\n        // Placeholder function to simulate fetching real-time traffic data\n        return [\n            { segment: 'A', congestionLevel: 'low' },\n            { segment: 'B', congestionLevel: 'high' },\n            { segment: 'C', congestionLevel: 'medium' },\n        ];\n    };\n\n    const predictTraffic = async (routeData) => {\n        const trafficData = await fetchTrafficData(routeData); // Use routeData\n        let predictedTime = calculateBaseTime(routeData); // Use routeData\n\n        trafficData.forEach(segment => {\n            if (segment.congestionLevel === 'high') {\n                predictedTime *= 1.5; // Increase time by 50%\n            } else if (segment.congestionLevel === 'medium') {\n                predictedTime *= 1.2; // Increase time by 20%\n            }\n        });\n\n        return predictedTime; // Return the predicted time for the route\n    };\n\n    const calculateBaseTime = (routeData) => {\n        // Calculate the base time for the route based on distance or other factors\n        return 20; // Assume 20 minutes base time for any route\n    };\n\n    const handleRouteFetch = async () => {\n        try {\n            const routeData = await getRoute(start, end);\n\n            // Predict traffic and adjust the route accordingly\n            const predictedTime = await predictTraffic(routeData); // Use routeData\n            console.log('Predicted time with traffic:', predictedTime);\n\n            if (map) {\n                // Clear existing layers if necessary\n                map.eachLayer((layer) => {\n                    if (layer instanceof L.Polyline) {\n                        map.removeLayer(layer);\n                    }\n                });\n\n                // Add the new route to the map\n                const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n                const polyline = L.polyline(latLngs, { color: 'blue' }).addTo(map);\n                map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n            }\n        } catch (error) {\n            console.error('Failed to fetch route:', error);\n            alert('Failed to fetch route. Please check your coordinates and try again.');\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>GPS Routing with TomTom API</h1>\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={start}\n                    onChange={(e) => setStart(e.target.value)}\n                    placeholder=\"Start (lat,long)\"\n                />\n                <input\n                    type=\"text\"\n                    value={end}\n                    onChange={(e) => setEnd(e.target.value)}\n                    placeholder=\"End (lat,long)\"\n                />\n                <button onClick={handleRouteFetch}>Get Route</button>\n            </div>\n            <div ref={mapContainerRef} id=\"map\" className=\"map-container\" style={{ width: '100%', height: '600px', position: 'relative' }}></div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
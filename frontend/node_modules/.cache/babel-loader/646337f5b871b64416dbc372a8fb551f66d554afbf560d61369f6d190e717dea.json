{"ast":null,"code":"import React,{useEffect,useState,useRef}from'react';import{getRoute}from'./tomtomService';import L from'leaflet';import'leaflet/dist/leaflet.css';import'./App.css';// Make sure to import your CSS file\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[start,setStart]=useState('51.505,-0.09');const[end,setEnd]=useState('51.51,-0.1');const[map,setMap]=useState(null);const[costs,setCosts]=useState({gameTheory:0,chaosTheory:0});// Initialize costs with default values\nconst mapInitializedRef=useRef(false);const mapContainerRef=useRef(null);// Reference for the map container\nuseEffect(()=>{// Initialize the map\nconst initMap=()=>{const mapInstance=L.map(mapContainerRef.current).setView([51.505,-0.09],13);L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=V6jo7iP3AoV0ql49vAAAQ6KDRDVcVAfD',{attribution:'&copy; TomTom'}).addTo(mapInstance);setMap(mapInstance);mapInitializedRef.current=true;// Mark the map as initialized\n};if(!mapInitializedRef.current){initMap();}return()=>{if(map){map.remove();// Cleanup the map instance\nsetMap(null);}};},[map]);const handleRouteFetch=async()=>{try{const routeData=await getRoute(start,end);// Log routeData to inspect its structure\nconsole.log('Route Data:',JSON.stringify(routeData,null,2));// Pretty print the object\nif(!routeData||!routeData.legs||routeData.legs.length===0){alert('No route found. Please check your coordinates and try again.');return;}// Clear existing layers if necessary\nmap.eachLayer(layer=>{if(layer instanceof L.Polyline){map.removeLayer(layer);}});// Add the new route to the map\nconst latLngs=routeData.legs[0].points.map(point=>[point.latitude,point.longitude]);const polyline=L.polyline(latLngs,{color:'blue'}).addTo(map);map.fitBounds(polyline.getBounds());// Adjust map view to show the route\n// Extract the distance from the route data\nconst distance=routeData.legs[0].length;// Check this property based on your API response\nconsole.log('Extracted Distance:',distance);// Log the distance value\n// Ensure distance is valid\nif(typeof distance!=='number'||isNaN(distance)||distance<=0){console.warn('Invalid distance:',distance);alert('Invalid distance received from route data.');return;// Exit if distance is not valid\n}// Simulate cost calculation using game theory and chaos theory\nsimulateCosts(distance);}catch(error){console.error('Failed to fetch route:',error);alert('Failed to fetch route. Please check your coordinates and try again.');}};const simulateCosts=distance=>{// Simulate some costs based on distance and hypothetical parameters\nconst trafficFactor=Math.random();// Simulate traffic factor (0 to 1)\nconst chaosFactor=Math.random()*2;// Simulate chaos factor (1 to 2)\nconst gameTheoryCost=distance*(1+trafficFactor);const chaosTheoryCost=distance*(1+chaosFactor);console.log('Game Theory Cost:',gameTheoryCost);// Log calculated cost\nconsole.log('Chaos Theory Cost:',chaosTheoryCost);// Log calculated cost\nsetCosts({gameTheory:gameTheoryCost.toFixed(2),// Format costs to two decimal places\nchaosTheory:chaosTheoryCost.toFixed(2)});};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"GPS Routing with TomTom API\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:start,onChange:e=>setStart(e.target.value),placeholder:\"Start (lat,long)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:end,onChange:e=>setEnd(e.target.value),placeholder:\"End (lat,long)\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleRouteFetch,children:\"Get Route\"})]}),/*#__PURE__*/_jsx(\"div\",{ref:mapContainerRef,id:\"map\",className:\"map-container\",style:{width:'100%',height:'600px',position:'relative'}}),costs&&/*#__PURE__*/_jsxs(\"div\",{className:\"costs-container\",style:{marginTop:'20px',padding:'10px',border:'1px solid #ccc',borderRadius:'5px'},children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Cost Estimates\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Game Theory Cost:\"}),\" $\",costs.gameTheory]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Chaos Theory Cost:\"}),\" $\",costs.chaosTheory]})]})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","useRef","getRoute","L","jsx","_jsx","jsxs","_jsxs","App","start","setStart","end","setEnd","map","setMap","costs","setCosts","gameTheory","chaosTheory","mapInitializedRef","mapContainerRef","initMap","mapInstance","current","setView","tileLayer","attribution","addTo","remove","handleRouteFetch","routeData","console","log","JSON","stringify","legs","length","alert","eachLayer","layer","Polyline","removeLayer","latLngs","points","point","latitude","longitude","polyline","color","fitBounds","getBounds","distance","isNaN","warn","simulateCosts","error","trafficFactor","Math","random","chaosFactor","gameTheoryCost","chaosTheoryCost","toFixed","className","children","type","value","onChange","e","target","placeholder","onClick","ref","id","style","width","height","position","marginTop","padding","border","borderRadius"],"sources":["F:/gps-web-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { getRoute } from './tomtomService';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css'; // Make sure to import your CSS file\n\nfunction App() {\n    const [start, setStart] = useState('51.505,-0.09');\n    const [end, setEnd] = useState('51.51,-0.1');\n    const [map, setMap] = useState(null);\n    const [costs, setCosts] = useState({ gameTheory: 0, chaosTheory: 0 }); // Initialize costs with default values\n    const mapInitializedRef = useRef(false);\n    const mapContainerRef = useRef(null); // Reference for the map container\n\n    useEffect(() => {\n        // Initialize the map\n        const initMap = () => {\n            const mapInstance = L.map(mapContainerRef.current).setView([51.505, -0.09], 13);\n            L.tileLayer('https://api.tomtom.com/map/1/tile/basic/main/{z}/{x}/{y}.png?key=V6jo7iP3AoV0ql49vAAAQ6KDRDVcVAfD', {\n                attribution: '&copy; TomTom'\n            }).addTo(mapInstance);\n            setMap(mapInstance);\n            mapInitializedRef.current = true; // Mark the map as initialized\n        };\n\n        if (!mapInitializedRef.current) {\n            initMap();\n        }\n\n        return () => {\n            if (map) {\n                map.remove(); // Cleanup the map instance\n                setMap(null);\n            }\n        };\n    }, [map]);\n\n    const handleRouteFetch = async () => {\n        try {\n            const routeData = await getRoute(start, end);\n            // Log routeData to inspect its structure\n            console.log('Route Data:', JSON.stringify(routeData, null, 2)); // Pretty print the object\n            if (!routeData || !routeData.legs || routeData.legs.length === 0) {\n                alert('No route found. Please check your coordinates and try again.');\n                return;\n            }\n\n            // Clear existing layers if necessary\n            map.eachLayer((layer) => {\n                if (layer instanceof L.Polyline) {\n                    map.removeLayer(layer);\n                }\n            });\n\n            // Add the new route to the map\n            const latLngs = routeData.legs[0].points.map(point => [point.latitude, point.longitude]);\n            const polyline = L.polyline(latLngs, { color: 'blue' }).addTo(map);\n            map.fitBounds(polyline.getBounds()); // Adjust map view to show the route\n\n            // Extract the distance from the route data\n            const distance = routeData.legs[0].length; // Check this property based on your API response\n            console.log('Extracted Distance:', distance); // Log the distance value\n\n            // Ensure distance is valid\n            if (typeof distance !== 'number' || isNaN(distance) || distance <= 0) {\n                console.warn('Invalid distance:', distance);\n                alert('Invalid distance received from route data.');\n                return; // Exit if distance is not valid\n            }\n\n            // Simulate cost calculation using game theory and chaos theory\n            simulateCosts(distance);\n\n        } catch (error) {\n            console.error('Failed to fetch route:', error);\n            alert('Failed to fetch route. Please check your coordinates and try again.');\n        }\n    };\n\n    const simulateCosts = (distance) => {\n        // Simulate some costs based on distance and hypothetical parameters\n        const trafficFactor = Math.random(); // Simulate traffic factor (0 to 1)\n        const chaosFactor = Math.random() * 2; // Simulate chaos factor (1 to 2)\n\n        const gameTheoryCost = distance * (1 + trafficFactor);\n        const chaosTheoryCost = distance * (1 + chaosFactor);\n\n        console.log('Game Theory Cost:', gameTheoryCost); // Log calculated cost\n        console.log('Chaos Theory Cost:', chaosTheoryCost); // Log calculated cost\n\n        setCosts({\n            gameTheory: gameTheoryCost.toFixed(2), // Format costs to two decimal places\n            chaosTheory: chaosTheoryCost.toFixed(2),\n        });\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>GPS Routing with TomTom API</h1>\n            <div className=\"input-container\">\n                <input\n                    type=\"text\"\n                    value={start}\n                    onChange={(e) => setStart(e.target.value)}\n                    placeholder=\"Start (lat,long)\"\n                />\n                <input\n                    type=\"text\"\n                    value={end}\n                    onChange={(e) => setEnd(e.target.value)}\n                    placeholder=\"End (lat,long)\"\n                />\n                <button onClick={handleRouteFetch}>Get Route</button>\n            </div>\n            <div ref={mapContainerRef} id=\"map\" className=\"map-container\" style={{ width: '100%', height: '600px', position: 'relative' }}></div>\n            {costs && (\n                <div className=\"costs-container\" style={{ marginTop: '20px', padding: '10px', border: '1px solid #ccc', borderRadius: '5px' }}>\n                    <h2>Cost Estimates</h2>\n                    <p><strong>Game Theory Cost:</strong> ${costs.gameTheory}</p>\n                    <p><strong>Chaos Theory Cost:</strong> ${costs.chaosTheory}</p>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}